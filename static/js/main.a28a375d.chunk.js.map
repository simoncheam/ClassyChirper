{"version":3,"sources":["App.jsx","index.js"],"names":["createdAt","moment","calendar","Toast","Swal","mixin","toast","position","showConfirmButton","timer","timerProgressBar","didOpen","addEventListener","stopTimer","resumeTimer","App","props","handleSubmit","e","state","username","chirp","fire","icon","title","setTimeout","imageUrl","width","padding","preventDefault","setState","chirps","id","uuidv4","html","Date","now","className","class","action","value","this","onChange","target","type","placeholder","maxLength","length","onClick","map","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a28a375d.chunk.js","sourcesContent":["import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport moment from 'moment';\nimport Swal from 'sweetalert2'\n\nconst maxLength = 50; //sets max chirp length, 50 to demo text formating\nlet createdAt = moment().calendar(); //timestamps\n\n// Sweet Alert code\nconst Toast = Swal.mixin({\n    toast: true,\n    position: 'top-end',\n    showConfirmButton: false,\n    timer: 500,\n    timerProgressBar: true,\n    didOpen: (toast) => {\n      toast.addEventListener('mouseenter', Swal.stopTimer)\n      toast.addEventListener('mouseleave', Swal.resumeTimer)\n    }\n  })\n\n// inherit features by exteding react's component class\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        // unlike useState, in a class \"ALL\" state is in \"ONE\" object\n        this.state = {\n            chirp: '', //indiv chirp string\n            chirps: [], //chirp array\n            username: '', //username\n            createdAt //timestamp\n        };\n\n    \n    }\n\n    //component lifecycle method\n\n    // This is our starting state        \n    componentDidMount() {\n\n        setTimeout(() => {\n\n            this.setState({\n\n                chirps: [...this.state.chirps, \n                    {username: \"Simon\", id: uuidv4(), chirp:\"aha omg computers are cool\", createdAt: \"random time in the past\"},\n                    {username: \"Luke\", id: uuidv4(), chirp:\"lol omg Y2K is coming!\", createdAt: \"12/31/1999\"},\n                    {username: \"Andrew\", id: uuidv4(), chirp:\" don't forget to berate your users! lmao\", createdAt: Date.now() +\" seconds ago\"},  \n                ]\n            });\n        \n        }, 2000);\n        \n    }\n\n\n    \n        // submitbutton handle\n        handleSubmit = (e) => {\n\n            if (this.state.username ==='' || this.state.chirp==='' ) {\n\n                Toast.fire({\n                    icon: 'error',\n                    title: 'Chirp failed! '\n                })\n                \n                  \n                setTimeout(() => {   \n                  \n                    Swal.fire({\n                        title: `Did you forget? You need to write something üôÑ `,\n                        imageUrl: 'https://media0.giphy.com/media/SWoRKslHVtqEasqYCJ/giphy.gif',\n                        width: 600,\n                        padding: '3em',\n                        \n                      })\n                  \n                    },750);\n                  \n                  \n\n                return;\n            }\n\n            e.preventDefault();\n            const newChirp = {\n\n            }\n                this.setState({\n                    chirp: '',   //sets chirp string\n                    username: '', //sets username\n                    chirps: [{ createdAt: this.state.createdAt, username: this.state.username, id: uuidv4(), chirp:this.state.chirp}, ...this.state.chirps  ] //creates array of chirps with initial chirps spread at the end of array\n\n                    });\n\n                    // console.log(`username ${this.state.username}`);\n                    // console.log(`chirp: ${this.state.chirp}`);\n                    // console.log(this.state.chirps);\n                    // console.log(this.state.createdAt);\n\n\n                    Toast.fire({\n                        icon: 'success',\n                        title: 'Chirp successful! üïä'\n                      })\n\n                      Swal.fire({\n                        html: `<p>Thank you <strong>${this.state.username}</strong>...<br> Your Chirp, <strong>\"${this.state.chirp}\"</strong>, was posted at ${this.state.createdAt} <br><br>\n                        \n                        üåé The world thanks you for your contribution.üôè</p>`,\n                        imageUrl: 'https://media1.giphy.com/media/Tt9jctxaVjRny/giphy.gif',\n                        width: 600,\n                        padding: '3em',\n                        \n                      })\n\n        }\n\n\n\n    render() {\n        return (\n            \n            <main className=\"container\">\n\n                <section className=\"row justify-content-center mt-5\">\n\n                    <div className=\"col-md-7\">\n                            <div>\n                                <h1 class=\"my-2\">üëã Hello! Welcome to Chirper!üê¶  </h1>\n                            </div>\n\n                            <form action=\"\" className=\"form-group\">\n\n                                <div>\n                                        <label class =\"my-2\" className=\"text-lg\"> Tell everyone what you think...because we care \n                                        </label>\n                                </div>\n\n                                <>\n\n                                {/* input Username */}\n                                <input class=\"my-2\" \n                                    value= {this.state.username} \n                                    onChange = {e => this.setState({username: e.target.value})} \n                                    className=\"form-control\" type=\"text-box\" placeholder =\"@username\"  /> \n                                </>\n\n                                {/* input chirp  */}\n                                <input \n                                    value = {this.state.chirp}\n                                    onChange = {e => this.setState({chirp: e.target.value})}\n                                    className=\"form-control\" placeholder =\"What's on your mind?ü§î\" \n                                    maxLength={maxLength}/>\n\n                                    <label className=\"text-sm\" class=\"bg-light m-2 text-secondary\" \n                                    \n                                    className={this.state.chirp?.length < maxLength-10 ? \"text-success\" : \"text-warning\" }>Characters = {this.state.chirp.length}/{maxLength}</label>\n                                        \n                                        {/* submite button */}\n                                    <div>  \n                                        <button onClick= {e => this.handleSubmit(e)} type=\"button\" className=\"btn-lg btn-primary my-2\">Click to Chirp</button>\n                                    </div>\n                            </form>\n                    </div>\n\n                </section>\n\n\n\n            <section className=\"row justify-content-center mt-3\">\n                <div className=\"col-md-6\">\n                    <ul className=\"list-group\">\n\n                        {this.state.chirps.map(chirp => (\n\n                            <div class=\"card my-2 \">\n                                <div class=\" shadow-lg\" className=\"card\">\n                                    <div className=\"card-header bg-info\">  @{chirp.username}</div>\n\n                                        <li className=\"list-group-item\" key={`chirp-${chirp.id}`}> \n                                            <div class =\"blockquote m-2\" className=\"card-body\">\n                                                    <p>\n                                                        {chirp.chirp}\n                                                    </p>\n\n                                                    <footer class=\"blockquote-footer my-1\">Created: {chirp.createdAt} \n                                                    </footer>\n\n                                                    <footer class=\"blockquote-footer my-1\">ID: {chirp.id} \n                                                    </footer>\n                                            </div>\n                                        </li>\n                                    </div>\n                                </div>\n                                                \n                        ))}\n                                                    \n                        </ul>\n                    </div>\n                </section>\n\n            </main>\n\n\n        );\n    }\n\n}\n\nexport default App;\n\n\n            \n            \n            \n            \n\n\n\n                                    \n                                    \n                              \n                                    \n\n\n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}